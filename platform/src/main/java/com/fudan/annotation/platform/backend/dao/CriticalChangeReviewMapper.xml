<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fudan.annotation.platform.backend.dao.CriticalChangeReviewMapper">

    <resultMap id="critical_change_review" type="com.fudan.annotation.platform.backend.entity.HunkEntityPlus">
        <result column="review_id" property="reviewId" jdbcType="INTEGER"/>
        <result column="new_path" property="newPath" jdbcType="VARCHAR"/>
        <result column="old_path" property="oldPath" jdbcType="VARCHAR"/>
        <result column="beginA" property="beginA" jdbcType="INTEGER"/>
        <result column="beginB" property="beginB" jdbcType="INTEGER"/>
        <result column="endA" property="endA" jdbcType="INTEGER"/>
        <result column="endB" property="endB" jdbcType="INTEGER"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="tool" property="tool" jdbcType="VARCHAR"/>
        <result column="account_name" property="accountName" jdbcType="VARCHAR"/>
        <result column="feedback" property="feedback" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="setCriticalChangeReview">
        insert into critical_change_review
        (regression_uuid, revision_name, new_path, old_path, beginA, beginB, endA, endB, type, tool,
        account_name, feedback)
        values (#{regressionUuid},
        #{revisionName},
        #{newPath},
        #{oldPath},
        #{beginA},
        #{beginB},
        #{endA},
        #{endB},
        #{type},
        #{tool},
        #{accountName},
        #{feedback});
    </insert>

    <update id="updateCriticalChangeReview">
        update critical_change_review
        set
        beginA = #{beginA},
        beginB = #{beginB},
        endA = #{endA},
        endB = #{endB},
        tool = #{tool},
        account_name = #{accountName},
        feedback = #{feedback}
        where review_id = #{reviewId}
    </update>

    <select id="getCriticalChangeReview" resultMap="critical_change_review">
        select review_id,new_path,old_path,beginA,beginB,endA,endB,type,tool,account_name,feedback from
        critical_change_review
        <where>
            regression_uuid = #{regressionUuid} and revision_name = #{revisionName}
        </where>
    </select>

    <delete id="deleteCriticalChangeReview">
        delete from critical_change
        <where>
            regression_uuid = #{regressionUuid} and revision_name = #{revisionName}
            and review_id = #{reviewId}
        </where>
    </delete>

</mapper>